<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo发生error：spawn failed错误的解决方法</title>
      <link href="/2021/10/09/hexo-fa-sheng-error-spawn-failed-cuo-wu-de-jie-jue-fang-fa/"/>
      <url>/2021/10/09/hexo-fa-sheng-error-spawn-failed-cuo-wu-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<ol><li>删除.deploy_git文件夹;</li><li>输入git config –global core.autocrlf false</li><li>然后，依次执行：<br>hexo clean<br>hexo g<br>hexo d<br>问题解决。暴力直接，有效。</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo发生error：spawn failed错误的解决方法 </category>
          
          <category> 教程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客操作</title>
      <link href="/2021/10/09/hexo-bo-ke-cao-zuo/"/>
      <url>/2021/10/09/hexo-bo-ke-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h1><p>hexo new newpapername<br>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再<br>发布github<br>hexo clean<br>hexo g<br>hexo d<br>发布服务器<br>hexo clean<br>hexo g<br>将打包后的public文件夹放置到服务器指定位置,nginx部署访问</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客操作 </category>
          
          <category> 教程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客hexo</title>
      <link href="/2021/10/09/bo-ke-hexo/"/>
      <url>/2021/10/09/bo-ke-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="简直神器！一键生成靓丽的博客网站，真香！"><a href="#简直神器！一键生成靓丽的博客网站，真香！" class="headerlink" title="简直神器！一键生成靓丽的博客网站，真香！"></a>简直神器！一键生成靓丽的博客网站，真香！</h1><p>作为程序员，如果你喜欢输出技术文章的话，一定有过搭建个人博客网站的想法。对比了好多博客框架之后，我发现Hexo+hexo-theme-matery主题搭建的博客网站，不仅界面漂亮，而且功能强大。今天带大家使用Hexo搭建一个靓丽的博客网站，希望对大家有所帮助！</p><h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p>Hexo是一个快速、简洁且高效的博客框架。我们可以使用Markdown写文章，然后通过Hexo生成静态网站，Hexo的主题非常丰富，很多你见过的博客都是用它生成的。</p><h1 id="hexo-theme-matery主题"><a href="#hexo-theme-matery主题" class="headerlink" title="hexo-theme-matery主题"></a>hexo-theme-matery主题</h1><p>使用Hexo时，我们一般会搭配第三方主题来使用，这里推荐一款基于Material Design设计的主题hexo-theme-matery，界面简单漂亮，文章内容美观易读。响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现。内置丰富插件，功能强大。</p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>我们将先使用Hexo搭建一个基本的博客网站，然后切换到hexo-theme-matery主题。</p><p>首先使用如下命令安装hexo-cli，看名字就知道是Hexo的CLI工具；<br>npm install -g hexo-cli<br>安装成功后初始化一个博客目录，并进入该目录，然后安装依赖；</p><h1 id="初始化博客目录"><a href="#初始化博客目录" class="headerlink" title="初始化博客目录"></a>初始化博客目录</h1><p>hexo init website-hexo</p><h1 id="进入博客目录"><a href="#进入博客目录" class="headerlink" title="进入博客目录"></a>进入博客目录</h1><p>cd website-hexo</p><h1 id="安装博客相关依赖"><a href="#安装博客相关依赖" class="headerlink" title="安装博客相关依赖"></a>安装博客相关依赖</h1><p>npm install<br>这样一个基本的博客网站就搭建完毕了，是不是秒建博客网站，然后使用如下命令启动博客网站；<br>hexo server<br>启动成功后我们可以访问下主页，用过Hexo的朋友应该知道，Hexo要搭配主题来使用，否则真的很丑，访问地址：<a href="http://localhost:4000/">http://localhost:4000/</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>搭建博客网站，有些配置需要自定义，接下来我们来讲下Hexo的整体配置和hexo-theme-matery的主题配置。</p><h1 id="Hexo整体配置"><a href="#Hexo整体配置" class="headerlink" title="Hexo整体配置"></a>Hexo整体配置</h1><p>支持Hexo的主题有很多，这里选择了我认为比较漂亮的一个hexo-theme-matery。</p><p>首先下载主题，并解压到项目的themes目录下，下载地址：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>修改项目根目录下的配置文件_config.yml，该文件为Hexo的整体配置，将theme属性改为hexo-theme-matery；<br>theme: hexo-theme-matery<br>修改成功后，我们重新启动项目，再看下首页，果然页面漂亮了很多，访问地址：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>当然_config.yml文件不仅可以改主题，还有很多网站配置也是可以更改的，比如网站配置、网址配置、首页配置等。</p><h1 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h1><p>title: macrozheng # 网站标题<br>subtitle: “macrozheng 的个人博客” # 网站副标题<br>description: “Justice may be late, but will never be absent.” # 网站描述<br>keywords:<br>author: macrozheng # 网站作者<br>language: zh-CN # 网站使用的语言，可以设置为中文<br>timezone: “”</p><h1 id="网址配置"><a href="#网址配置" class="headerlink" title="网址配置"></a>网址配置</h1><p>url: <a href="https://shalilideli.github.io/">https://shalilideli.github.io/</a> # 网址，会影响文章页的原文链接地址<br>permalink: :year/:month/:day/:title/ # 文章的永久链接格式</p><h1 id="首页配置"><a href="#首页配置" class="headerlink" title="首页配置"></a>首页配置</h1><p>index_generator:<br>  path: “”<br>  per_page: 12 # 分页设置，该主题设置6、12、18比较好<br>  order_by: -date # 按时间倒序排列</p><h1 id="分页配置"><a href="#分页配置" class="headerlink" title="分页配置"></a>分页配置</h1><p>per_page: 12<br>pagination_dir: page<br>添加固定页面<br>在首页顶部有一些导航按钮，如标签、分类、归档等，如果我们没创建对应页面的话，会无法访问；</p><h2 id="使用hexo-new-page-“categories”命令新建分类页，分类页至少包含如下内容；"><a href="#使用hexo-new-page-“categories”命令新建分类页，分类页至少包含如下内容；" class="headerlink" title="使用hexo new page “categories”命令新建分类页，分类页至少包含如下内容；"></a>使用hexo new page “categories”命令新建分类页，分类页至少包含如下内容；</h2><p>title: categories<br>date: 2021-09-06 10:19:56<br>type: “categories”<br>layout: “categories”</p><hr><h2 id="使用hexo-new-page-“tags”命令新建标签页，标签页至少包含如下内容；"><a href="#使用hexo-new-page-“tags”命令新建标签页，标签页至少包含如下内容；" class="headerlink" title="使用hexo new page “tags”命令新建标签页，标签页至少包含如下内容；"></a>使用hexo new page “tags”命令新建标签页，标签页至少包含如下内容；</h2><p>title: tags<br>date: 2021-09-06 10:25:04<br>type: “tags”<br>layout: “tags”</p><hr><h2 id="使用hexo-new-page-“about”命令新建关于页，关于页至少包含如下内容；"><a href="#使用hexo-new-page-“about”命令新建关于页，关于页至少包含如下内容；" class="headerlink" title="使用hexo new page “about”命令新建关于页，关于页至少包含如下内容；"></a>使用hexo new page “about”命令新建关于页，关于页至少包含如下内容；</h2><p>title: about<br>date: 2021-09-06 10:28:56<br>type: “about”<br>layout: “about”</p><hr><h2 id="使用hexo-new-page-404命令新建404页，404至少包含如下内容；"><a href="#使用hexo-new-page-404命令新建404页，404至少包含如下内容；" class="headerlink" title="使用hexo new page 404命令新建404页，404至少包含如下内容；"></a>使用hexo new page 404命令新建404页，404至少包含如下内容；</h2><p>title: 404<br>date: 2021-09-06 10:32:48<br>type: “404”<br>layout: “404”<br>description: “Oops～，我崩溃了！找不到你想要的页面 :(“</p><hr><p>页面都创建成功后，项目目录结构如下，这里贴下目录，方便大家理解。</p><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>我们不仅需要修改Hexo的配置，还需要修改hexo-theme-matery主题的配置，比如顶部的菜单导航，还有关于页面，这些都是在主题中配置的。注意：主题配置需要修改/themes/hexo-theme-matery/_config.yml文件。</p><p>我们可以对导航菜单进行配置，比如我添加了项目这个导航菜单；</p><h1 id="配置菜单导航的名称、路径和图标icon"><a href="#配置菜单导航的名称、路径和图标icon" class="headerlink" title="配置菜单导航的名称、路径和图标icon."></a>配置菜单导航的名称、路径和图标icon.</h1><p>menu:<br>  Index:<br>    url: /<br>    icon: fas fa-home<br>  项目:<br>    icon: fas fa-project-diagram”<br>    children:<br>      - name: mall<br>        url: <a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a><br>      - name: mall-admin-web<br>        url: <a href="https://github.com/macrozheng/mall-admin-web">https://github.com/macrozheng/mall-admin-web</a><br>      - name: mall-tiny<br>        url: <a href="https://github.com/macrozheng/mall-tiny">https://github.com/macrozheng/mall-tiny</a><br>  Tags:<br>    url: /tags<br>    icon: fas fa-tags<br>添加成功后，导航菜单里面就有了项目这个菜单，并且可以展示二级菜单；</p><p>我们可以对首页介绍进行配置，修改dream下的配置即可；</p><h1 id="配置首页显示”梦想”的语句"><a href="#配置首页显示”梦想”的语句" class="headerlink" title="配置首页显示”梦想”的语句."></a>配置首页显示”梦想”的语句.</h1><p>dream:<br>  enable: true<br>  showTitle: true<br>  title: 关于本站<br>  text: 本站是macrozheng的个人博客网站，初衷是为了分享和记录自己平时所学到的技术。作者Github开源项目mall（50K+Star），欢迎关注我的公众号「macrozheng」。<br>配置成功后首页显示如下；<br>图片<br>我们可以对首页banner中的个人信息进行配置；</p><h1 id="首页-banner-中的第二行个人信息配置，留空即不启用"><a href="#首页-banner-中的第二行个人信息配置，留空即不启用" class="headerlink" title="首页 banner 中的第二行个人信息配置，留空即不启用"></a>首页 banner 中的第二行个人信息配置，留空即不启用</h1><p>socialLink:<br>  github: <a href="https://github.com/macrozheng">https://github.com/macrozheng</a> # <a href="https://github.com/xxx">https://github.com/xxx</a><br>  email: <a href="mailto:macrozheng@126.com">macrozheng@126.com</a> # <a href="mailto:xxx@xxx.com">xxx@xxx.com</a><br>  facebook: # <a href="https://www.facebook.com/xxx">https://www.facebook.com/xxx</a><br>  twitter: # <a href="https://twitter.com/xxx">https://twitter.com/xxx</a><br>  qq: # 123456789<br>  weibo: # <a href="https://weibo.com/xxx">https://weibo.com/xxx</a><br>  zhihu: # <a href="https://www.zhihu.com/xxx">https://www.zhihu.com/xxx</a><br>  juejin: <a href="https://juejin.im/user/5cf7c1d7f265da1bc07e28b7">https://juejin.im/user/5cf7c1d7f265da1bc07e28b7</a><br>  jianshu: <a href="https://www.jianshu.com/u/9bdcaae6d6b7">https://www.jianshu.com/u/9bdcaae6d6b7</a><br>  rss: false # true、false<br>由于我们自定义了两个链接，掘金和简书，还需要修改主题目录下的/layout/_partial/social-link.ejs文件，增加如下内容，否则无法显示；<br>&lt;% if (theme.socialLink.juejin) { %&gt;<br>    <a href="<%= theme.socialLink.juejin %>" class="tooltipped" target="_blank" data-tooltip="关注我的掘金: <%= theme.socialLink.juejin %>" data-position="top" data-delay="50"><br>        <i class="fab fa-zhihu1">掘</i><br>    </a><br>&lt;% } %&gt;</p><p>&lt;% if (theme.socialLink.jianshu) { %&gt;<br>    <a href="<%= theme.socialLink.jianshu %>" class="tooltipped" target="_blank" data-tooltip="关注我的简书: <%= theme.socialLink.jianshu %>" data-position="top" data-delay="50"><br>        <i class="fab fa-zhihu1">简</i><br>    </a><br>&lt;% } %&gt;<br>配置成功后首页显示如下；</p><p>我们可以对关于页进行配置，下面配置了个人信息、我的项目，关闭了技术展示；</p><h1 id="在”关于”页面中配置个人信息，包括头像、职业和个人介绍"><a href="#在”关于”页面中配置个人信息，包括头像、职业和个人介绍" class="headerlink" title="在”关于”页面中配置个人信息，包括头像、职业和个人介绍."></a>在”关于”页面中配置个人信息，包括头像、职业和个人介绍.</h1><p>profile:<br>  avatar: /medias/avatar.png<br>  career: Java 开发工程师<br>  introduction: 专注Java技术分享，涵盖SpringBoot、SpringCloud、Docker、中间件等实用技术，Github开源项目mall（50K+Star）。</p><h1 id="在“关于”页面配置”我的项目”信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除"><a href="#在“关于”页面配置”我的项目”信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除" class="headerlink" title="在“关于”页面配置”我的项目”信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除."></a>在“关于”页面配置”我的项目”信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除.</h1><p>myProjects:<br>  enable: true<br>  data:<br>    mall:<br>      icon: fab fa-java<br>      iconBackground: “linear-gradient(to bottom right, #66BB6A 0%, #81C784 100%)”<br>      url: <a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a><br>      desc: mall项目是一套电商系统，包括前台商城系统及后台管理系统，基于SpringBoot+MyBatis实现。<br>    mall-admin-web:<br>        icon: fab fa-vuejs<br>        iconBackground: “linear-gradient(to bottom right, #F06292 0%, #EF5350 100%)”<br>        url: <a href="https://github.com/macrozheng/mall-admin-web">https://github.com/macrozheng/mall-admin-web</a><br>        desc: mall-admin-web是一个电商后台管理系统的前端项目，基于Vue+Element实现。<br>    mall-tiny:<br>      icon: fab fa-java<br>      iconBackground: “linear-gradient(to bottom right, #66BB6A 0%, #81C784 100%)”<br>      url: <a href="https://github.com/macrozheng/mall-tiny">https://github.com/macrozheng/mall-tiny</a><br>      desc: 基于SpringBoot+MyBatis的单应用项目骨架。</p><h1 id="在“关于”页面配置”我的技能”信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除"><a href="#在“关于”页面配置”我的技能”信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除" class="headerlink" title="在“关于”页面配置”我的技能”信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除."></a>在“关于”页面配置”我的技能”信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除.</h1><p>mySkills:<br>  enable: false<br>  data:<br>    Java:<br>      background: “linear-gradient(to right, #FF0066 0%, #FF00CC 100%)”<br>      percent: 85%<br>配置成功后个人页显示如下；<br>图片<br>还有一些其他有用的配置，比如Github链接配置、转载配置、分享配置、打字机副标题配置和备案号配置等。</p><h1 id="配置是否在-header-中显示-fork-me-on-github-的图标，默认为true，你可以修改为你的仓库地址"><a href="#配置是否在-header-中显示-fork-me-on-github-的图标，默认为true，你可以修改为你的仓库地址" class="headerlink" title="配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址."></a>配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址.</h1><p>githubLink:<br>  enable: true<br>  url: <a href="https://github.com/macrozheng">https://github.com/macrozheng</a><br>  title: Fork Me</p><h1 id="转载声明"><a href="#转载声明" class="headerlink" title="转载声明"></a>转载声明</h1><p>reprint:<br>  enable: true<br>  default: cc_by_nc_nd</p><h1 id="sharejs文章分享模块"><a href="#sharejs文章分享模块" class="headerlink" title="sharejs文章分享模块."></a>sharejs文章分享模块.</h1><h1 id="支持顺序，可选项目为twitter-facebook-google-qq-qzone-wechat-weibo-douban-linkedin"><a href="#支持顺序，可选项目为twitter-facebook-google-qq-qzone-wechat-weibo-douban-linkedin" class="headerlink" title="支持顺序，可选项目为twitter, facebook, google, qq, qzone, wechat, weibo, douban, linkedin."></a>支持顺序，可选项目为twitter, facebook, google, qq, qzone, wechat, weibo, douban, linkedin.</h1><p>sharejs:<br>  enable: true<br>  sites: qq,wechat,weibo,douban</p><h1 id="打字效果副标题"><a href="#打字效果副标题" class="headerlink" title="打字效果副标题."></a>打字效果副标题.</h1><h1 id="如果有符号-“，请在-“-前面加上"><a href="#如果有符号-“，请在-“-前面加上" class="headerlink" title="如果有符号 “，请在 “ 前面加上"></a>如果有符号 “，请在 “ 前面加上</h1><p>subtitle:<br>  enable: true<br>  loop: true # 是否循环<br>  showCursor: true # 是否显示光标<br>  startDelay: 300 # 开始延迟<br>  typeSpeed: 100 # 打字速度<br>  backSpeed: 50 # 删除速度<br>  sub:<br>    - Justice may be late, but will never be absent.</p><h1 id="ICP备案信息尾部显示"><a href="#ICP备案信息尾部显示" class="headerlink" title="ICP备案信息尾部显示"></a>ICP备案信息尾部显示</h1><p>icp:<br>  enable: true<br>  url: <a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn</a> # 备案链接<br>  text: 陕ICP备2021011981 # 备案信息</p><h1 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h1><p>编写文章的话，我们可以直接使用Markdown来写，然后在头部添加Front-matter配置即可，文章都放在source/_posts目录下。</p><p>这里我们已经在_posts目录中添加好了文章，重启博客网站就可以看到了；</p><h2 id="我们必须给每篇文章添加Front-matter，Front-matter可以用来配置文章的标题、分类、标签等信息，一个简单的配置如下；"><a href="#我们必须给每篇文章添加Front-matter，Front-matter可以用来配置文章的标题、分类、标签等信息，一个简单的配置如下；" class="headerlink" title="我们必须给每篇文章添加Front-matter，Front-matter可以用来配置文章的标题、分类、标签等信息，一个简单的配置如下；"></a>我们必须给每篇文章添加Front-matter，Front-matter可以用来配置文章的标题、分类、标签等信息，一个简单的配置如下；</h2><p>title: mall整合SpringBoot+MyBatis搭建基本骨架<br>date: 2021-08-21 16:30:11<br>permalink: /pages/c68875/<br>categories:</p><ul><li>mall学习教程</li><li>架构篇<br>tags:</li><li>SpringBoot</li><li>MyBatis</li></ul><hr><p>Front-matter的配置很多，这里就不展开描述了，直接参考下表即可；</p><p>如果你想让某些文章在首页获得推荐的话，可以添加top: true配置；</p><p>如果你直接复制图片过来的话，你会发现图片是无法显示的，我们需要把文章图片的相对路径改为绝对路径才可以显示；<br><img src="../images/springcloud_arch.png" alt="相对图片路径"><br><img src="/images/springcloud_arch.png" alt="绝对图片路径"><br>如果你的文章中有代码的话，默认情况下显示会有问题，需要修改Hexo的配置_config.yml，禁用highlight，启用prismjs才可以正常显示；<br>highlight:<br>  enable: false<br>  line_number: true<br>  auto_detect: false<br>  tab_replace: “”<br>  wrap: true<br>  hljs: false<br>prismjs:<br>  enable: true<br>  preprocess: true<br>  line_number: true<br>  tab_replace: “”<br>这里如果不生效的话，可以使用hexo clean命令清空缓存再试试，附一张代码块样式对比图；</p><p>还有默认情况下搜索插件是不生效的，我们需要先使用如下命令安装搜索插件；<br>npm install hexo-generator-search –save<br>然后修改Hexo在根目录下的配置文件_config.yml，新增如下配置；<br>search:<br>  path: search.xml<br>  field: post<br>搜索生效以后，显示效果如下。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>Hexo生成网站既快速又简单，一个命令生成静态文件，然后放置到Nginx的html目录下即可。</p><p>在命令行使用hexo generate命令可以将项目打包成静态文件，输出文件目录为public；</p><p>接下来把public目录下的所有文件复制到Nginx的html目录下即可完成部署，部署后显示内容如下。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用Hexo搭配hexo-theme-matery来搭建博客网站，不仅界面漂亮，而且功能强大。如果你想搭建自己的博客网站，这是个很好的选择！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>hexo-theme-matery主题官网：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a><br>hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br>项目地址<br><a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客hexo </category>
          
          <category> 教程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>傻丽丽本丽</title>
      <link href="/2021/09/23/sha-li-li-ben-li/"/>
      <url>/2021/09/23/sha-li-li-ben-li/</url>
      
        <content type="html"><![CDATA[<h1 id="何为傻丽丽"><a href="#何为傻丽丽" class="headerlink" title="何为傻丽丽"></a>何为傻丽丽</h1><p>  顾名思义就是比较傻的那种丽丽的一种,想必大家在生活中应该会比较常见到的吧.希望大家遇到都能善待她,毕竟已经这么傻了,在受点什么刺激会得不偿失哟.</p>]]></content>
      
      
      <categories>
          
          <category> 傻丽丽本丽 </category>
          
          <category> 本丽篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 傻丽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑页面上的任何文本</title>
      <link href="/2021/09/23/bian-ji-ye-mian-shang-de-ren-he-wen-ben/"/>
      <url>/2021/09/23/bian-ji-ye-mian-shang-de-ren-he-wen-ben/</url>
      
        <content type="html"><![CDATA[<p>4、编辑页面上的任何文本<br>在控制台输入document.body.contentEditable=”true”或者document.designMode = ‘on’就可以实现对网页的编辑了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux安装nginx </category>
          
          <category> 教程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux配置nginx</title>
      <link href="/2021/09/23/linux-pei-zhi-nginx/"/>
      <url>/2021/09/23/linux-pei-zhi-nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="linux下安装nginx"><a href="#linux下安装nginx" class="headerlink" title="linux下安装nginx"></a>linux下安装nginx</h1><p>在安装nginx前首先要确认系统中安装了gcc、pcre-devel、zlib-devel、openssl-devel。</p><p>yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep “软件名或者包名”</p><p>举例：查看是否安装了gcc<br>yum list installed | grep “gcc”</p><p>安装命令：<br>yum -y install gcc pcre-devel zlib-devel openssl openssl-devel<br>下载 <a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a><br>解压 tar -zxvf nginx-1.9.9.tar.gz<br>移动到指定路径 mv /sjgr2020/ziyuanbao/nginx-1.20.1/ /usr/local/nginx/</p><p>进入nginx目录<br>cd nginx-1.9.9<br>使用默认配置<br>./configure<br>编译安装 分别执行<br>make<br>make install<br>上述执行成功以后前一目录会多个nginx目录,进入nginx/sbin目录，可以看到有一个可执行文件nginx，直接./nginx执行就OK了。<br>./nginx</p><p>查看是否启动成功<br>ps -ef | grep nginx<br>然后在网页上访问自己的IP就可以了默认端口为80（出现如下欢迎界面就成功了！）</p><p>注意问题<br>如以上步骤都完成且没有问题的话，就做如下操作<br>查看防火墙是否开启<br>systemctl status firewalld<br>启动防火墙后，默认没有开启任何端口，需要手动开启端口。nginx默认是80端口<br>手动开启端口命令<br>firewall-cmd –zone=public –add-port=80/tcp –permanent<br>命令含义： –zone #作用域 –add-port=80/tcp #添加端口，格式为：端口/通讯协议 –permanent #永久生效，没有此参数重启后失效<br>开启后需要重启防火墙才生效<br>systemctl restart firewalld.service<br>查看防火墙是否开启了80端口的访问<br>firewall-cmd –list-all<br>开启后再次访问！！</p><p>如果启动后出现了如下的问题就是80端口被占用<br>可以用下面这个命令进行查看80端口被谁占用<br>netstat -tunlp | grep 80<br>这里因为我之前开启了的是被nginx.master或者nginx.woeker占用就不用管，如果不是这个的话那就把那个进程关闭掉<br>kill -9 进程号<br>关闭之后重启nginx再次访问！！</p>]]></content>
      
      
      <categories>
          
          <category> Linux安装nginx </category>
          
          <category> 教程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux配置nodejs</title>
      <link href="/2021/09/23/linux-pei-zhi-nodejs/"/>
      <url>/2021/09/23/linux-pei-zhi-nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统安装Nodejs"><a href="#Linux系统安装Nodejs" class="headerlink" title="Linux系统安装Nodejs"></a>Linux系统安装Nodejs</h1><h3 id="获取Node-js-安装包"><a href="#获取Node-js-安装包" class="headerlink" title="获取Node.js 安装包"></a>获取Node.js 安装包</h3><p>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E7%B3%BB%E7%BB%9F%E9%80%89%E6%8B%A9%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9A%84">https://nodejs.org/en/download/，你可以根据不同平台系统选择你需要的</a> Node.js 安装包，这里选择的是 [LTS] Linux Binaries (x64)。</p><h3 id="Linux-上安装-Node-js"><a href="#Linux-上安装-Node-js" class="headerlink" title="Linux 上安装 Node.js"></a>Linux 上安装 Node.js</h3><p>tar xf node-v12.18.1-linux-x64.tar.xz  // 解压<br>mv /sjgr2020/ziyuanbao/nginx-1.20.1/ /usr/local/nginx/   //剪切到对应路径<br>然后 vim /etc/profile，在最下面添加 export PATH=$PATH: 后面跟上 node 下 bin 目录的路径<br>export NODEJS_HOME=/usr/local/node/node-v14.17.5-linux-x64<br>export PATH=$PATH:$NODEJS_HOME/bin</p><h3 id="立即生效"><a href="#立即生效" class="headerlink" title="立即生效"></a>立即生效</h3><p>source /etc/profile<br>[root@localhost ~]# node -v<br>v12.18.1<br>OK！安装成功！</p>]]></content>
      
      
      <categories>
          
          <category> Linux安装nodejs </category>
          
          <category> 教程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux配置jre</title>
      <link href="/2021/09/23/linux-pei-zhi-jre/"/>
      <url>/2021/09/23/linux-pei-zhi-jre/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下安装Java运行环境"><a href="#Linux下安装Java运行环境" class="headerlink" title="Linux下安装Java运行环境"></a>Linux下安装Java运行环境</h1><p>现需要项目部署到Linux中，需要配置java运行环境。</p><h4 id="注：以下测试环境系统为centOS-用户为超级管理员，jre8。"><a href="#注：以下测试环境系统为centOS-用户为超级管理员，jre8。" class="headerlink" title="注：以下测试环境系统为centOS,用户为超级管理员，jre8。"></a>注：以下测试环境系统为centOS,用户为超级管理员，jre8。</h4><h2 id="1-下载最新版的jre-服务器环境下不需要配置jdk-下载地址如下："><a href="#1-下载最新版的jre-服务器环境下不需要配置jdk-下载地址如下：" class="headerlink" title="1.下载最新版的jre(服务器环境下不需要配置jdk),下载地址如下："></a>1.下载最新版的jre(服务器环境下不需要配置jdk),下载地址如下：</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html">http://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html</a><br>这里选择linux x64 版本</p><h2 id="2-将jre通过ftprush-上传到服务器对应路径-usr-local-java-下。"><a href="#2-将jre通过ftprush-上传到服务器对应路径-usr-local-java-下。" class="headerlink" title="2.将jre通过ftprush 上传到服务器对应路径/usr/local/java/下。"></a>2.将jre通过ftprush 上传到服务器对应路径/usr/local/java/下。</h2><h2 id="3-进入linux系统，解压缩-jre-文件，在对应路径下创建java文件夹，把解压后的文件复制进去。"><a href="#3-进入linux系统，解压缩-jre-文件，在对应路径下创建java文件夹，把解压后的文件复制进去。" class="headerlink" title="3.进入linux系统，解压缩 jre 文件，在对应路径下创建java文件夹，把解压后的文件复制进去。"></a>3.进入linux系统，解压缩 jre 文件，在对应路径下创建java文件夹，把解压后的文件复制进去。</h2><p>  创建文件夹：[root@localhost ~]# mkdir /home/java/<br>  解压jre：[root@localhost data]# tar -zxvf server-jre-8u161-linux-x64.tar.gz<br>  移动至/home/java：[root@localhost ~]# mv /home/data/jdk1.8.0_161/ /home/java/</p><h2 id="4-为jre文件夹及子文件夹赋予超级用户的权限，并配置环境变量"><a href="#4-为jre文件夹及子文件夹赋予超级用户的权限，并配置环境变量" class="headerlink" title="4.为jre文件夹及子文件夹赋予超级用户的权限，并配置环境变量"></a>4.为jre文件夹及子文件夹赋予超级用户的权限，并配置环境变量</h2><p>  赋予权限： chown root:root -R /home/java/jdk1.8.0_161/<br>  环境变量配置：vi /etc/profile<br>  进入编辑模式在文件中尾处添加：<br>  export JAVA_HOME=/usr/local/java/jre1.8.0_202<br>  export PATH=$ JAVA_HOME/bin:$ PATH<br>  export CLASSPATH=.: $ JAVA_HOME/lib/dt.jar:$ JAVA_HOME/lib<br>  添加完后执行 ：source /etc/profile  （重置环境变量，使得修改生效）</p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><p>  执行java命令、java -version，出现以下，那么你就成功了</p>]]></content>
      
      
      <categories>
          
          <category> Linux安装Jre </category>
          
          <category> 教程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名解析</title>
      <link href="/2021/09/23/yu-ming-jie-xi/"/>
      <url>/2021/09/23/yu-ming-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>域名申请完毕，需要将公网ip地址绑定到域名上</p><h1 id="1-验证域名解析是否正常"><a href="#1-验证域名解析是否正常" class="headerlink" title="1.验证域名解析是否正常"></a><strong>1.验证域名解析是否正常</strong></h1><p>cmd&gt;&gt; ping  <a href="http://www.xxxx.com/">www.xxxx.com</a></p><p>此时表明域名解析可以正常使用。</p><p>cmd&gt;&gt;nslookup  <a href="http://www.xxx.com/">www.xxx.com</a><br>nslookup 显示服务器名字的原理叫做 DNS 逆向查询，用于查询域名对应的 IP<br><a href="https://www.zhihu.com/question/23306829">https://www.zhihu.com/question/23306829</a></p><h1 id="2-检查ping返回ip与实际公网ip是否相同"><a href="#2-检查ping返回ip与实际公网ip是否相同" class="headerlink" title="2.检查ping返回ip与实际公网ip是否相同"></a><strong>2.检查ping返回ip与实际公网ip是否相同</strong></h1><p>参考网址：<a href="http://service.oray.com/question/359.html">http://service.oray.com/question/359.html</a><br>正常情况下，ping返回的ip即为域名对应的公网IP地址。但是显示IP地址也有可能与实际公网IP不同。可能出现ping命令返回的ip并非电脑实际的ip。可能有如下几个原因：</p><p>①电脑中DNS缓存尚未刷新</p><p>当用户在浏览器中访问某域名（如<a href="http://www.xx.com),dns缓存会保留关于用户输入的域名的ip记录.之后ip地址改变,用户再次访问www.xx.com,浏览器会首先在dns缓存中寻找该域名对应的ip,并返回给用户.而此时,域名实际对应的ip已经改变,导致ping返回的ip与实际公网ip不同/">www.xx.com），DNS缓存会保留关于用户输入的域名的ip记录。之后ip地址改变，用户再次访问www.xx.com，浏览器会首先在DNS缓存中寻找该域名对应的ip，并返回给用户。而此时，域名实际对应的ip已经改变，导致ping返回的ip与实际公网ip不同</a></p><p>  清除DNS缓存的命令：cmd&gt;&gt; ipconfig/flushdns<br>  查看DNS缓存： cmd&gt;&gt;ipconfig/displaydns<br>②宽带接入商的地区DNS服务器尚未刷新数据</p><p>   ip更新后，DNS服务器1虽然已经将域名指向新的ip，但ping时连接的DNS服务器2有可能尚未与DNS服务器1同步，内容没有更新，ping命令返回的仍是旧的ip。</p><p>   解决办法是把本机DNS服务器设置为当地最高效的DNS服务器，你可以直接拨打你的宽带接入商的服务电话询问并把问到的高效DNS地址设置到你的电脑上即可。</p><p>③ping命令返回的是一个局域网ip地址</p><p>   造成这种现象的原因是在host文件中将<a href="http://www.xx.com与某个局域网ip对应。删除host文件中相关内容即可。host文件地址一般：">www.xx.com与某个局域网ip对应。删除host文件中相关内容即可。host文件地址一般：</a> c:\windows\system32\drivers\etc\</p>]]></content>
      
      
      <categories>
          
          <category> 域名解析 </category>
          
          <category> 教程篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/09/17/hello-world/"/>
      <url>/2021/09/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
